
[section API Overview]

Header: `<Aboria.h>`

[h3 Utility]

* [classref Aboria::Vector Vector] - a $n$-dimensional vector of a given type

[h3 Level 1 - Data structures]

[table Creating a particle set 

[[Class Name] [Description]]

    [[[classref Aboria::Particles]]         
    
        [The main particle set container, implemented as a zipped set of 
        vectors] ]
    [[[classref Aboria::Variable]]     
    
        [Objects of this class are normally never created. Instead, this class 
        is used as a "tag" type, and is used to name variables that are added to 
        the particle set] ]
    [[[macroref ABORIA_VARIABLE]]     
    
        [This is a pre-processor macro that creates a [classref 
        Aboria::Variable] class, use this rather than using [classref 
        Aboria::Variable] directly] ]
]

[table Getting particles and variables

[[Class Name] [Description]]

    [[[classref Aboria::getter_type]]         
    
        [This is used to refer to an individual particle in a [classref 
        Aboria::Particles]. It implements a tuple of values or references, or 
        pointers, that are or point to the variables of that particle. When you 
        use the [memberref Aboria::Particles::operator\[\]] operator, you get a 
        [classref Aboria::getter_type] that contains references to that 
        particle's variables]]


    [[[funcref Aboria::get]]     
    
        [This function is used to "get" a variable from a [classref 
        Aboria::getter_type]. It it used in a similar fashion to the `std::get` 
        function, but takes a [classref Aboria::Variable] type as the template 
        argument instead of an `int` ]]


    [[[classref Aboria::zip_iterator]]

        [This class is an iterator for the [classref Aboria::Particles] class.  
        It points to a single particle within the particle set. Dereferencing it 
        gives you a [classref Aboria::getter_type] that contains references to 
        the particle's variables]]
]


[table Internal Traits for Level 0 vector
    [[[classref Aboria::Traits<std::vector>]]         
    
        [To use a STL compatible vector to construct a [classref 
        Aboria::Particles], a specialisation of [classref Aboria::Traits] must 
        exist]]
]


[h3 Level 2 - Algorithms and Matrix-free Linear Operators]

[table Creating Linear Operators

[[Class Name] [Description]]

    [[[classref Aboria::MatrixReplacement]]
    
        [This is a matrix replacement class that can be used within the 
        [@https://eigen.tuxfamily.org/ Eigen]
        linear algebra library. It follows the layout given in the Eigen
        [@https://eigen.tuxfamily.org/dox/group__MatrixfreeSolverExample.html 
        documentation for matrix-free operators]. Note that this "matrix"
        can only be used in a matrix-vector multiply with a standard Eigen 
        vector]]

    [[[funcref Aboria::create_dense_operator]]         
    
        [Creates an instance of [classref Aboria::MatrixReplacement] that 
        implements a fully dense matrix. It takes a standard C++ function object 
        or lambda expression]]

    [[[funcref Aboria::create_sparse_operator]]         
    
        [Creates an instance of [classref Aboria::MatrixReplacement] that 
        implements a sparse matrix, where the elements are assumed zero for 
        particle pairs that are separated by more than a given distance.]]

    [[[funcref Aboria::create_zero_operator]]         
    
        [Creates an instance of [classref Aboria::MatrixReplacement] that 
        implements a zero matrix]]

    [[[funcref Aboria::create_chebyshev_operator]]         
    
        [Creates an instance of [classref Aboria::MatrixReplacement] that 
        implements a dense matrix. When multiplied by a vector, the result
        is approximated using Chebyshev interpolation]]


    [[[funcref Aboria::create_block_operator]]         
    
        [Takes one or more [classref Aboria::MatrixReplacement] instances and 
        forms a $N \times M$ block operator]]
]

[h3 Level 3 - Symbolic particle-based DSL]

[table Creating expression terminals
[[Class Name] [Description]]

    [[[classref Aboria::Symbol]]         
    
        [An object of this class is a symbolic reference to a particle's 
        variable. It is similar to [classref Aboria::Variable], but unlike 
        [classref Aboria::Variable], objects can be created with type [classref 
        Aboria::Symbol], and then participate in symbolic expressions]]

    [[[classref Aboria::Label]]         
    
        [An object of this class is a symbolic reference to a particle set, and 
        can participate in symbolic expressions]]

    [[[funcref Aboria::create_dx]]         
    
        [A function that creates a symbolic reference to the shortest difference 
        between two particle's positions. It takes two [classref::Label] objects 
        as its arguments]]

    [[[classref Aboria::Accumulate]]         
    
        [An object of this class is a symbolic reference to a accumulation (e.g.  
        a summation) over a particle set]]

]


[table Symbolic functions

[[Class Name] [Description]]

    [[[funcref Aboria::norm]]         
    
        [A lazy function that calculates the L2 norm of a vector ]]

    [[[funcref Aboria::inf_norm]]         
    
        [A lazy function that calculates the Linf norm of a vector ]]

    [[[funcref Aboria::dot]]         
    
        [A lazy function that calculates the dot product of two vectors ]]

    [[[funcref Aboria::exp]]         
    
        [A lazy function that calculates the result of `std::exp` on a scalar]]

    [[[funcref Aboria::pow]]         
    
        [A lazy function that calculates the result of `std::pow` on a scalar]]

    [[[funcref Aboria::abs]]         
    
        [A lazy function that calculates the result of `std::abs` on a scalar]]

    [[[funcref Aboria::log]]         
    
        [A lazy function that calculates the result of `std::log` on a scalar]]

    [[[funcref Aboria::erf]]         
    
        [A lazy function that calculates the result of `std::erf` on a scalar]]

    [[[funcref Aboria::sign]]         
    
        [A lazy function that calculates the result of `std::sign` on a scalar]]
]

[xinclude libaboria.xml]

[endsect]
