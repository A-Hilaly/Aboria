[section Particle Container]

[section Creating new particles]

The main particles data-structure, or container, is called [classref Aboria::Particles Particles]. It is templated on zero or more variable types. For example, the following creates a set of particles which each have (along with the standard variables such as position, id etc) a data package consisting of one double variable type named scalar.

``
using namespace Aboria;

ABORIA_VARIABLE(scalar,double,"my scalar")
typedef Particles<scalar> MyParticles;
MyParticles particles();
``

If you wanted each particle to have a potential variable held as a `double`, as well as a velocity variable held as a [classref Aboria::Vect3d Vect3d] vector class, then you would write the following

``
ABORIA_VARIABLE(potential,double,"potential energy")
ABORIA_VARIABLE(velocity,Vect3d,"velocity")
typedef Particles<potential,velocity> MyParticles;
MyParticles particles();
``

You can also give the `MyParticles` constructor a single `unsigned int` argument to set the random seed for the container:

``
MyParticles particles_with_seed(0);
``

To create new particles simply use the `value_type` of the container type. Each particle constructor takes a single [classref Aboria::Vect3d Vect3d] type for the particle position.

``
typedef MyParticles::value_type MyParticle;
particles.push_back(MyParticle(Vect3d(0,0,0)));
particles.push_back(MyParticle(Vect3d(1,0,0)));
``

[endsect]


[section Particle Objects]

The `value_type` of the [classref Aboria::Particles Particles] container is a data-structure representing each particle. By default each particle has a position, a unique id and a 
boolean flag indicating if this particle is active or not. Use `get<position>()` 
to access the position, `get<id>()` for the id and `get<alive>()` for the alive 
flag.

``
MyParticle& particle = particles[0];
std::cout <<"Position = "<<get<position>(particle) << 
   ". Id = "<<get<id>(particle)<< ". Particle is ";
if (get<alive>(particle)) {
   std::cout << "alive. " << "\n";
} else {
   std::cout << "dead. " << "\n";
}
``

You can access the data by templating the `get` function with the variable type, 
for example

``
std::cout << "The scalar data is " << get<scalar>(particle) << "\n";
``

[endsect]

[section Looping through the container]

You can use the indexing operator `Operator[]` to simply loop through the 
container

``
for (int i=0; i < particles.size(); i++) {
   std::cout << "Accessing particle with id = " << get<id>(particles[i]) << "\n";
}
``

Or you can use the normal STL `begin()` and `end()` functions that return random 
access iterators to the beginning and end of the container.

``
for (auto i = particles.begin(); i != particles.end(); i++) {
   std::cout << "Accessing particle with id = " << get<id>(*i) << "\n";
}
``

Or

``
for (auto i: particles) {
   std::cout << "Accessing particle with id = " << get<id>(i) << "\n";
}
``

Or you can use the STL algorithm `for_each`. If you are using a GCC compiler, 
you can turn on the parallel mode to enable this loop to be run in parallel

``
std::for_each(particles.begin(), particles.end(), [](MyParticle& i) {
   std::cout << "Accessing particle with id = " << get<id>(i) << "\n";
});
``

[endsect]

[endsect]


