[section Creating new particles]

The main particles data-structure, or container, is called Particles. It is templated on zero or more variable types. For example, the following creates a set of particles which each have (along with the standard variables such as position, id etc) a data package consisting of one double variable type named scalar.

using namespace Aboria;

ABORIA_VARIABLE(scalar,double,"my scalar")
typedef Particles<scalar> MyParticles;
MyParticles particles();
If you wanted each particle to have a potential variable held as a double, as well as a velocity variable held as a Vect3d vector class, then you would write the following

ABORIA_VARIABLE(potential,double,"potential energy")
ABORIA_VARIABLE(velocity,Vect3d,"velocity")
typedef Particles<potential,velocity> MyParticles;
MyParticles particles();
You can also give the MyParticles constructor a single unsigned int argument to set the random seed for the container:

MyParticles particles_with_seed(0);
To create new particles simply use the value_type of the container type. Each particle constructor takes a single Vect3d type for the particle position.

typedef MyParticles::value_type MyParticle;
particles.push_back(MyParticle(Vect3d(0,0,0)));
particles.push_back(MyParticle(Vect3d(1,0,0)));

[endsect]
